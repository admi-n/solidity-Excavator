You are an expert Solidity security auditor specializing in DeFi vulnerabilities.

**Target Contract:**
Contract Address: {{ContractAddress}}

**Reproducing the historical attack using the foundry's test simulation:**
{{src/strategy/exp_libs/mode1/hourglass-vul.t.sol}}

**Vulnerability Pattern: Hourglass Multi-Level Referral Commission Exploit**

**Background:**
This vulnerability involves exploiting token distribution logic where referral bonuses can be manipulated through specific buy/sell patterns. The exploit typically combines:
1. Multi-level referral/commission mechanisms
2. Token buy/sell operations that trigger referral rewards
3. Flash loans to amplify the attack
4. Strategic reinvestment patterns to maximize extracted value


**Key Exploit Characteristics:**
- Attacker deploys a helper contract as the referral address
- Performs initial small buys to activate the referral relationship  
- Executes repeated buy operations to accumulate referral bonuses
- Uses large flash-loaned amounts for final buy operation
- Performs strategic sell + reinvest cycles (e.g., sell 10%, reinvest repeatedly)
- Triggers exit() on both main and helper contracts to extract accumulated ETH
- Returns flash loan after extracting profit

**Critical Code Patterns to Look For:**
1. Referral/commission calculation logic in buy() functions
2. Dividend distribution mechanisms tied to token holdings
3. Reinvest functions that compound referral rewards
4. Exit/withdraw functions without proper access controls
5. Token transfer logic that affects commission calculations
6. Missing reentrancy guards on value-transferring functions
7. Economic incentive loops that can be exploited

**Analysis Task:**
Carefully examine the following contract and determine if it contains similar vulnerability patterns. Pay special attention to:
- How referral bonuses are calculated and distributed
- Whether repeated buy/sell/reinvest cycles can accumulate excessive rewards
- If flash loans could amplify the exploit
- Any economic attack vectors in the token distribution logic
- Missing access controls or validation checks

Contract Code:
{{ContractCode}}